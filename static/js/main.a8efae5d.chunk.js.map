{"version":3,"sources":["chat-window/ChatWindow.jsx","App.js","reportWebVitals.js","index.js"],"names":["ChatWindow","props","sendMessage","history","input","useRef","userNameArea","className","htmlFor","name","defaultValue","type","ref","map","data","index","userName","message","toString","onSubmit","e","current","value","App","useState","status","setStatus","setHistory","socket","io","useEffect","on","emit","mess","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAgDeA,G,MA3CI,SAACC,GAAW,IACrBC,EAAyBD,EAAzBC,YAAaC,EAAYF,EAAZE,QACfC,EAAQC,mBACRC,EAAeD,mBACrB,OACE,0BAASE,UAAU,eAAnB,UACE,uBAAMA,UAAU,OAAhB,UACE,uBAAOA,UAAU,QAAQC,QAAQ,YAAjC,2BACA,uBAAOD,UAAU,OAAOE,KAAK,YAAYC,aAAa,YAAYC,KAAK,OAAOC,IAAKN,OAErF,qBAAKC,UAAU,UAAf,SACGJ,EAAQU,KAAI,SAACC,EAAMC,GAAP,OACX,mBAAGR,UAAS,kBAAaQ,EAAQ,EAAI,UAAY,IAAjD,mBAAkFD,EAAKE,SAAvF,aAAoGF,EAAKG,UAA7CF,EAAMG,iBAGtE,uBACEX,UAAU,OACVY,SAAU,SAACC,GACT,IAAMH,EAAUb,EAAMiB,QAAQC,MACxBN,EAAWV,EAAae,QAAQC,MACtCpB,EAAYkB,EAAGH,EAASD,GACxBZ,EAAMiB,QAAQC,MAAQ,IAN1B,UASE,uBAAOf,UAAU,YAAYI,KAAK,OAAOC,IAAKR,IAC9C,wBAAQG,UAAU,UAAUI,KAAK,SAAjC,0BCKOY,MA/Bf,WAAgB,IAAD,EACeC,mBAAS,WADxB,mBACNC,EADM,KACEC,EADF,OAEiBF,mBAAS,IAF1B,mBAENrB,EAFM,KAEGwB,EAFH,KAGPC,EAASC,EAAG,kDAYlB,OAXAC,qBAAU,WACRF,EAAOG,GAAG,WAAW,WACnBL,EAAU,UACVE,EAAOI,KAAK,kBAEdJ,EAAOG,GAAG,gBAAgB,SAACjB,GAAWa,EAAWb,QAChD,IAMD,sBAAKP,UAAU,MAAf,UACE,sCAEE,iCACG,IADH,IAGGkB,EAHH,UAOF,cAAC,EAAD,CAAYvB,YAfI,SAACkB,EAAGa,EAAMxB,GAC5BW,EAAEc,iBACFN,EAAOI,KAAK,cAAe,CAAEf,QAASgB,EAAMjB,SAAUP,KAadN,QAASA,QChBtCgC,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.a8efae5d.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport './chat.scss';\n\nconst ChatWindow = (props) => {\n  const { sendMessage, history } = props;\n  const input = useRef();\n  const userNameArea = useRef();\n  return (\n    <section className=\"chat-wrapper\">\n      <form className=\"form\">\n        <label className=\"label\" htmlFor=\"user-name\">Set User Name</label>\n        <input className=\"user\" name=\"user-name\" defaultValue=\"Anonymous\" type=\"text\" ref={userNameArea} />\n      </form>\n      <div className=\"history\">\n        {history.map((data, index) => (\n          <p className={`message ${index % 2 ? 'colored' : ''}`} key={index.toString()}>{`${data.userName}: ${data.message}`}</p>\n        ))}\n      </div>\n      <form\n        className=\"form\"\n        onSubmit={(e) => {\n          const message = input.current.value;\n          const userName = userNameArea.current.value;\n          sendMessage(e, message, userName);\n          input.current.value = '';\n        }}\n      >\n        <input className=\"inputArea\" type=\"text\" ref={input} />\n        <button className=\"buttton\" type=\"submit\">\n          SEND\n        </button>\n      </form>\n    </section>\n  );\n};\n\nChatWindow.propTypes = {\n  sendMessage: PropTypes.func.isRequired,\n  history: PropTypes.arrayOf(PropTypes.shape(\n    {\n      message: PropTypes.string,\n      userName: PropTypes.string,\n    },\n  )).isRequired,\n};\n\nexport default ChatWindow;\n","import React, { useEffect, useState } from 'react';\nimport * as io from 'socket.io-client';\nimport ChatWindow from './chat-window/ChatWindow';\n\nfunction App() {\n  const [status, setStatus] = useState('OFFLINE');\n  const [history, setHistory] = useState([]);\n  const socket = io('https://protected-hollows-39206.herokuapp.com/');\n  useEffect(() => {\n    socket.on('connect', () => {\n      setStatus('ONLINE');\n      socket.emit('get_history');\n    });\n    socket.on('send_message', (data) => { setHistory(data); });\n  }, []);\n  const sendMessage = (e, mess, name) => {\n    e.preventDefault();\n    socket.emit('new_message', { message: mess, userName: name });\n  };\n  return (\n    <div className=\"App\">\n      <h1>\n        CHAT\n        <span>\n          {' '}\n          (\n          {status}\n          )\n        </span>\n      </h1>\n      <ChatWindow sendMessage={sendMessage} history={history} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}